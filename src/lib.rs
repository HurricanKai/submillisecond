use std::{io, mem};

pub use http;
use http::{header, HeaderValue};
use lunatic::{
    net::{TcpListener, TcpStream, ToSocketAddrs},
    Mailbox, Process,
};
pub use submillisecond_macros::*;

pub use crate::error::{BoxError, Error};
pub use crate::handler::Handler;
pub use crate::request::Request;
pub use crate::response::{IntoResponse, IntoResponseParts, Response};

#[macro_use]
pub(crate) mod macros;

pub mod core;
pub mod defaults;
pub mod extract;
pub mod guard;
#[cfg(feature = "json")]
pub mod json;
pub mod params;
pub mod request_context;
#[cfg(feature = "template")]
pub mod template;

mod error;
mod handler;
mod request;
mod response;

/// Signature of router function generated by the [`router!`] macro.
pub type Router = fn(Request) -> Result<Response, RouteError>;

#[derive(Clone, Copy)]
pub struct Application {
    router: Router,
}

impl Application {
    pub fn new(router: Router) -> Self {
        Application { router }
    }

    pub fn serve<A: ToSocketAddrs>(self, addr: A) -> io::Result<()> {
        let listener = TcpListener::bind(addr)?;

        while let Ok((stream, _)) = listener.accept() {
            Process::spawn_link(
                (stream, self.router as *const () as usize),
                |(stream, handler_raw): (TcpStream, usize), _: Mailbox<()>| {
                    let handler = unsafe {
                        let pointer = handler_raw as *const ();
                        mem::transmute::<*const (), Router>(pointer)
                    };

                    let request = match core::parse_request(stream.clone()) {
                        Ok(request) => request,
                        Err(err) => {
                            if let Err(err) =
                                core::write_response(stream, err.into_final_response())
                            {
                                eprintln!("[http reader] Failed to send response {:?}", err);
                            }
                            return;
                        }
                    };

                    let http_version = request.version();
                    let mut response =
                        Handler::handle(handler, request.into()).into_final_response();

                    let content_length = response.body().len();
                    *response.version_mut() = http_version;
                    response
                        .headers_mut()
                        .append(header::CONTENT_LENGTH, HeaderValue::from(content_length));

                    if let Err(err) = core::write_response(stream, response) {
                        eprintln!("[http reader] Failed to send response {:?}", err);
                    }
                },
            );
        }

        Ok(())
    }
}

pub trait Middleware {
    fn before(&mut self, req: &mut Request);
    fn after(&self, res: &mut Response);
}

#[derive(Debug)]
pub enum RouteError {
    ExtractorError(Response),
    RouteNotMatch(Request),
}

impl RouteError {
    fn into_response(self) -> Response {
        match self {
            RouteError::ExtractorError(resp) => resp,
            RouteError::RouteNotMatch(_) => defaults::err_404(),
        }
    }
}

impl IntoResponse for RouteError {
    fn into_response(self) -> Result<Response, RouteError> {
        Err(self)
    }

    fn into_final_response(self) -> Response {
        match self {
            RouteError::ExtractorError(resp) => resp,
            RouteError::RouteNotMatch(_) => defaults::err_404(),
        }
    }
}
